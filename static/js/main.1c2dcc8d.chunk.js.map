{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["QRCode","require","App","createMuiTheme","palette","primary","red","blue","useState","textfield","settextfield","url","seturl","colour","setColour","useEffect","className","Box","component","sx","m","width","noValidate","autoComplete","TextField","id","label","variant","onChange","e","target","value","style","backgroundColor","height","marginLeft","marginBottom","src","Button","borderRadius","padding","fontSize","onClick","preventDefault","opts","quality","margin","scale","color","dark","light","toDataURL","err","console","log","qrget","type","download","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAOIA,GADYC,EAAQ,IACXA,EAAQ,KA+INC,EA7IH,WACOC,YAAe,CAAEC,QAAS,CAAEC,QAASC,OACpCH,YAAe,CAAEC,QAAS,CAAEC,QAASE,OADvD,IAGI,EAA4BC,mBAAS,0BAAzC,mBAAKC,EAAL,KAAgBC,EAAhB,KACI,EAAgBF,mBAClB,4HADF,mBAAKG,EAAL,KAAUC,EAAV,KAGI,EAAsBJ,mBAAS,WAAnC,mBAAKK,EAAL,KAAaC,EAAb,KAyCA,OAvCAC,qBAAU,eAwCR,sBAAKC,UAAU,MAAf,UACE,eAACC,EAAA,EAAD,CACED,UAAU,WACVE,UAAU,OACVC,GAAI,CACF,kBAAmB,CAAEC,EAAG,EAAGC,MAAO,SAEpCC,YAAU,EACVC,aAAa,MAPf,UASE,cAACC,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,wBACNC,QAAQ,WACRC,SAAU,SAACC,GACTnB,EAAamB,EAAEC,OAAOC,UAG1B,cAACP,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,oCACNC,QAAQ,WACRC,SAAU,SAACC,GACTf,EAAUe,EAAEC,OAAOC,aAQzB,qBACEC,MAAO,CACLC,gBAAiBpB,EACjBqB,OAAQ,GACRb,MAAO,GACPc,WAAY,OACZC,aAAc,OANlB,SASGvB,IAGH,qBAAKG,UAAU,YAAf,SACE,qBAAKqB,IAAK1B,EAAKK,UAAU,YAG3B,cAACsB,EAAA,EAAD,CACEtB,UAAU,cACVgB,MAAO,CACLO,aAAc,GACdN,gBAAiB,UACjBO,QAAS,WACTC,SAAU,QAEZd,QAAQ,YACRe,QAAS,SAACb,IAjFhB,SAAeA,GACbA,EAAEc,iBAEF,IAAIC,EAAO,CACTC,QAAS,GACTC,OAAQ,GACRC,MAAO,GACPC,MAAO,CACLC,KAAMpC,EACNqC,MAAO,YAIXlD,EAAOmD,UAAU1C,EAAWmC,GAAM,SAAUQ,EAAKzC,GAC/C0C,QAAQC,IAAI3C,GACZC,EAAOD,MAmEH4C,CAAM1B,IAER2B,KAAK,SAZP,uBAiBA,4HADC7C,EAEC,wBAEA,mBAAG8C,SAAS,aAAaC,KAAM/C,EAA/B,SACE,cAAC2B,EAAA,EAAD,CACEtB,UAAU,eACVgB,MAAO,CACLO,aAAc,GACdN,gBAAiB,UACjBO,QAAS,WACTM,OAAQ,WACRL,SAAU,QAEZd,QAAQ,YAIR6B,KAAK,SAbP,4BCnHKG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1c2dcc8d.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { Box, color, height } from \"@mui/system\";\nimport TextField from \"@mui/material/TextField\";\nimport { Button, createMuiTheme } from \"@mui/material\";\nimport { blue, red } from \"@mui/material/colors\";\nvar FileSaver = require(\"file-saver\");\nvar QRCode = require(\"qrcode\");\n\nconst App = () => {\n  const redTheme = createMuiTheme({ palette: { primary: red } });\n  const blueTheme = createMuiTheme({ palette: { primary: blue } });\n\n  var [textfield, settextfield] = useState(\"this is made by shibam\");\n  var [url, seturl] = useState(\n    \"https://is1-ssl.mzstatic.com/image/thumb/Purple123/v4/de/91/d6/de91d68b-a3d7-cf3d-72a4-881671c17069/source/512x512bb.jpg\"\n  );\n  var [colour, setColour] = useState(\"#04a9ff\");\n\n  useEffect(() => {\n    // console.log(\"HI\")\n    // fetch(\"https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=Baaaaal\")\n    // .then((response)=>{\n    //   console.log(response.body)\n    // })\n  });\n\n  // function generette(e){\n  //   e.preventDefault();\n  //   console.log(\"generette\")\n  //   console.log(textfield)\n  //   seturl(`https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${textfield}`)\n  // }\n\n  function qrget(e) {\n    e.preventDefault();\n\n    var opts = {\n      quality: 0.9,\n      margin: 0.8,\n      scale: 30,\n      color: {\n        dark: colour,\n        light: \"#f6f6f6\",\n      },\n    };\n\n    QRCode.toDataURL(textfield, opts, function (err, url) {\n      console.log(url);\n      seturl(url);\n    });\n  }\n\n  // const downloadBase64Data = (base64String, fileName) => {\n  //     let file = convertBase64ToFile(base64String, fileName);\n  //     saveAs(file, fileName);\n  // }\n\n  return (\n    <div className=\"App\">\n      <Box\n        className=\"form-div\"\n        component=\"form\"\n        sx={{\n          \"& > :not(style)\": { m: 1, width: \"25ch\" },\n        }}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Text to convert in Qr\"\n          variant=\"outlined\"\n          onChange={(e) => {\n            settextfield(e.target.value);\n          }}\n        />\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Colour code you want default blue\"\n          variant=\"outlined\"\n          onChange={(e) => {\n            setColour(e.target.value);\n          }}\n        />\n\n        {/* <TextField id=\"filled-basic\" label=\"Filled\" variant=\"filled\" />\n        <TextField id=\"standard-basic\" label=\"Standard\" variant=\"standard\" /> */}\n      </Box>\n\n      <div\n        style={{\n          backgroundColor: colour,\n          height: 20,\n          width: 70,\n          marginLeft: \"50vw\",\n          marginBottom: \"1vh\",\n        }}\n      >\n        {colour}\n      </div>\n\n      <div className=\"Image-Div\">\n        <img src={url} className=\"image\"></img>\n      </div>\n\n      <Button\n        className=\"convert-btn\"\n        style={{\n          borderRadius: 35,\n          backgroundColor: \"#21b6ae\",\n          padding: \"8px 36px\",\n          fontSize: \"15px\",\n        }}\n        variant=\"contained\"\n        onClick={(e) => {\n          qrget(e);\n        }}\n        type=\"submit\"\n      >\n        Generette\n      </Button>\n      {url ==\n      \"https://is1-ssl.mzstatic.com/image/thumb/Purple123/v4/de/91/d6/de91d68b-a3d7-cf3d-72a4-881671c17069/source/512x512bb.jpg\" ? (\n        <div></div>\n      ) : (\n        <a download=\"qrcode.jpg\" href={url}>\n          <Button\n            className=\"download-btn\"\n            style={{\n              borderRadius: 35,\n              backgroundColor: \"#95d03a\",\n              padding: \"8px 36px\",\n              margin: \"0px 10px\",\n              fontSize: \"15px\",\n            }}\n            variant=\"contained\"\n            // onClick={(e)=>{\n            //   qrget(e)\n            // }}\n            type=\"submit\"\n          >\n            Download\n          </Button>\n        </a>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}